// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  userCode        String      @unique @default(uuid())
  username        String      @unique
  name            String?
  lastName        String?
  email           String      @unique
  emailCode       String?     @unique @default(uuid())
  emailVerifiedAt DateTime?
  password        String
  state           Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  role            Role        @relation(fields: [roleId], references: [id])
  roleId          Int
  career          Career?     @relation(fields: [careerId], references: [id])
  careerId        Int?
  Documents       Documents[]
}

model Institute {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  state     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Career    Career[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  state     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Career {
  id          Int       @id @default(autoincrement())
  acronym     String    @unique
  code        String    @unique
  modality    Modality  @default(PRESENCIAL)
  name        String    @unique
  state       Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  institutes  Institute @relation(fields: [instituteId], references: [id])
  instituteId Int
  User        User[]
}

model Documents {
  id            Int      @id @default(autoincrement())
  path          String
  code          String   @unique
  state         Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  documentsType DocumentsType? @relation(fields: [documentsTypeId], references: [id])
  documentsTypeId Int?
  destinataries String?
}

model DocumentsType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  acronym   String   @unique
  father    Int?
  state     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Documents Documents[]
}

enum Modality {
  PRESENCIAL
  VIRTUAL
  DISTANCIA
}
